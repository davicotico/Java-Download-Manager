package io.github.davicotico.downloadmanager.forms;

import io.github.davicotico.downloadmanager.components.DownloadsTableModel;
import io.github.davicotico.downloadmanager.components.ProgressRenderer;
import io.github.davicotico.downloadmanager.core.Download;
import io.github.davicotico.downloadmanager.utils.ThemeManager;
import java.awt.Desktop;
import java.io.File;
import java.io.IOException;
import java.net.URL;
import java.util.Observable;
import java.util.Observer;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.JProgressBar;
import javax.swing.ListSelectionModel;
import javax.swing.event.ListSelectionEvent;
import javax.swing.filechooser.FileSystemView;

/**
 *
 * @author David Tomas Ticona
 */
public class DownloadManager extends javax.swing.JFrame implements Observer {

    private boolean clearing;

    private DownloadsTableModel tableModel;

    private Download selectedDownload;
    // Directorio para descargas
    private String folder;

    /**
     * Creates new form DownloadManager
     */
    public DownloadManager() {
        initComponents();
        this.folder = FileSystemView.getFileSystemView().getDefaultDirectory().getPath() + File.separator;
        txtDownloadsFolderPath.setText(this.folder);
        txtUrl.requestFocusInWindow();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        tabDownloads = new javax.swing.JTabbedPane();
        panelDownload = new javax.swing.JPanel();
        panelUrl = new javax.swing.JPanel();
        lblUrl = new javax.swing.JLabel();
        txtUrl = new javax.swing.JTextField();
        btnAddDownload = new javax.swing.JButton();
        panelActionButtons = new javax.swing.JPanel();
        btnPause = new javax.swing.JButton();
        btnResume = new javax.swing.JButton();
        btnCancelDownload = new javax.swing.JButton();
        btnClean = new javax.swing.JButton();
        scrollTblDownloads = new javax.swing.JScrollPane();
        tableModel = new DownloadsTableModel();
        tblDownloads = new javax.swing.JTable();
        panelSettings = new javax.swing.JPanel();
        panelDownloadsFolder = new javax.swing.JPanel();
        txtDownloadsFolderPath = new javax.swing.JTextField();
        btnSearchFolder = new javax.swing.JButton();
        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Download Manager v0.9.0");
        setMaximumSize(new java.awt.Dimension(1024, 768));
        setMinimumSize(new java.awt.Dimension(700, 600));
        setPreferredSize(new java.awt.Dimension(700, 600));
        setSize(new java.awt.Dimension(700, 600));
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
        });
        getContentPane().setLayout(new java.awt.BorderLayout(0, 10));

        tabDownloads.setFont(new java.awt.Font("SansSerif", 0, 12)); // NOI18N
        tabDownloads.setPreferredSize(new java.awt.Dimension(657, 450));

        panelDownload.setBorder(javax.swing.BorderFactory.createEmptyBorder(10, 10, 10, 10));
        panelDownload.setFont(new java.awt.Font("SansSerif", 0, 12)); // NOI18N
        panelDownload.setLayout(new java.awt.BorderLayout(0, 5));

        panelUrl.setPreferredSize(new java.awt.Dimension(598, 40));
        panelUrl.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT));

        lblUrl.setFont(new java.awt.Font("SansSerif", 0, 12)); // NOI18N
        lblUrl.setText("URL");
        lblUrl.setPreferredSize(new java.awt.Dimension(23, 25));
        panelUrl.add(lblUrl);

        txtUrl.setFont(new java.awt.Font("SansSerif", 0, 12)); // NOI18N
        txtUrl.setMinimumSize(new java.awt.Dimension(400, 19));
        txtUrl.setPreferredSize(new java.awt.Dimension(480, 25));
        panelUrl.add(txtUrl);

        btnAddDownload.setFont(new java.awt.Font("SansSerif", 0, 12)); // NOI18N
        btnAddDownload.setIcon(ThemeManager.icons.get("plus")
        );
        btnAddDownload.setText("Add Download");
        btnAddDownload.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddDownloadActionPerformed(evt);
            }
        });
        panelUrl.add(btnAddDownload);

        panelDownload.add(panelUrl, java.awt.BorderLayout.NORTH);

        panelActionButtons.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        panelActionButtons.setPreferredSize(new java.awt.Dimension(301, 40));

        btnPause.setFont(new java.awt.Font("SansSerif", 0, 12)); // NOI18N
        btnPause.setIcon(ThemeManager.icons.get("pause")
        );
        btnPause.setText("Pause");
        btnPause.setEnabled(false);
        btnPause.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnPauseActionPerformed(evt);
            }
        });
        panelActionButtons.add(btnPause);

        btnResume.setFont(new java.awt.Font("SansSerif", 0, 12)); // NOI18N
        btnResume.setIcon(ThemeManager.icons.get("play")
        );
        btnResume.setText("Resume");
        btnResume.setEnabled(false);
        btnResume.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnResumeActionPerformed(evt);
            }
        });
        panelActionButtons.add(btnResume);

        btnCancelDownload.setFont(new java.awt.Font("SansSerif", 0, 12)); // NOI18N
        btnCancelDownload.setIcon(ThemeManager.icons.get("stop")
        );
        btnCancelDownload.setText("Cancel");
        btnCancelDownload.setEnabled(false);
        btnCancelDownload.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCancelDownloadActionPerformed(evt);
            }
        });
        panelActionButtons.add(btnCancelDownload);

        btnClean.setFont(new java.awt.Font("SansSerif", 0, 12)); // NOI18N
        btnClean.setIcon(ThemeManager.icons.get("minus-square")
        );
        btnClean.setText("Delete");
        btnClean.setToolTipText("Delete selected item");
        btnClean.setEnabled(false);
        btnClean.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCleanActionPerformed(evt);
            }
        });
        panelActionButtons.add(btnClean);

        panelDownload.add(panelActionButtons, java.awt.BorderLayout.SOUTH);

        tblDownloads.setFont(new java.awt.Font("SansSerif", 0, 12)); // NOI18N
        tblDownloads.setModel(tableModel);
        setupTable();
        scrollTblDownloads.setViewportView(tblDownloads);

        panelDownload.add(scrollTblDownloads, java.awt.BorderLayout.CENTER);

        tabDownloads.addTab("Download", panelDownload);

        panelSettings.setBorder(javax.swing.BorderFactory.createEmptyBorder(10, 10, 10, 10));
        panelSettings.setFont(new java.awt.Font("SansSerif", 0, 12)); // NOI18N
        panelSettings.setLayout(new java.awt.BorderLayout());

        panelDownloadsFolder.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Downloads Folder", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("SansSerif", 0, 12))); // NOI18N
        panelDownloadsFolder.setFont(new java.awt.Font("SansSerif", 0, 12)); // NOI18N
        panelDownloadsFolder.setMinimumSize(new java.awt.Dimension(105, 80));
        panelDownloadsFolder.setPreferredSize(new java.awt.Dimension(652, 60));
        panelDownloadsFolder.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT));

        txtDownloadsFolderPath.setFont(new java.awt.Font("SansSerif", 0, 12)); // NOI18N
        txtDownloadsFolderPath.setPreferredSize(new java.awt.Dimension(400, 25));
        panelDownloadsFolder.add(txtDownloadsFolderPath);

        btnSearchFolder.setFont(new java.awt.Font("SansSerif", 0, 12)); // NOI18N
        btnSearchFolder.setIcon(ThemeManager.icons.get("folder-open")
        );
        btnSearchFolder.setText("Browse...");
        btnSearchFolder.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSearchFolderActionPerformed(evt);
            }
        });
        panelDownloadsFolder.add(btnSearchFolder);

        panelSettings.add(panelDownloadsFolder, java.awt.BorderLayout.NORTH);
        panelDownloadsFolder.getAccessibleContext().setAccessibleName("");
        panelDownloadsFolder.getAccessibleContext().setAccessibleDescription("");

        tabDownloads.addTab("Settings", panelSettings);

        getContentPane().add(tabDownloads, java.awt.BorderLayout.SOUTH);

        jLabel1.setFont(new java.awt.Font("SansSerif", 1, 14)); // NOI18N
        jLabel1.setText("Download Manager v0.9.0");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 231, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(415, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(19, 19, 19)
                .addComponent(jLabel1)
                .addContainerGap(20, Short.MAX_VALUE))
        );

        getContentPane().add(jPanel1, java.awt.BorderLayout.NORTH);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnPauseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnPauseActionPerformed
        actionPause();
    }//GEN-LAST:event_btnPauseActionPerformed

    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
        actionExit();
    }//GEN-LAST:event_formWindowClosing

    private void btnResumeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnResumeActionPerformed
        actionResume();
    }//GEN-LAST:event_btnResumeActionPerformed

    private void btnCleanActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCleanActionPerformed
        actionClear();
    }//GEN-LAST:event_btnCleanActionPerformed

    private void btnCancelDownloadActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCancelDownloadActionPerformed
        actionCancel();
    }//GEN-LAST:event_btnCancelDownloadActionPerformed

    private void btnAddDownloadActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddDownloadActionPerformed
        actionAdd();
    }//GEN-LAST:event_btnAddDownloadActionPerformed

    private void btnSearchFolderActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSearchFolderActionPerformed
        JFileChooser chooser = new JFileChooser();
        chooser.setCurrentDirectory(new java.io.File("."));
        chooser.setDialogTitle("Buscando directorio destino...");
        chooser.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
        chooser.setAcceptAllFileFilterUsed(false);
        if (chooser.showOpenDialog(null) == JFileChooser.APPROVE_OPTION) {
            this.setFolder(chooser.getSelectedFile().getPath());
            txtDownloadsFolderPath.setText(this.folder);
        }
    }//GEN-LAST:event_btnSearchFolderActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(DownloadManager.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(DownloadManager.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(DownloadManager.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(DownloadManager.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new DownloadManager().setVisible(true);
            }
        });
    }

    /**
     * Actualiza los botones dependiento del estado de la descarga seleccionada
     * en la tabla
     */
    private void updateButtons() {
        if (selectedDownload != null) {
            int status = selectedDownload.getStatus();
            switch (status) {
                case Download.DOWNLOADING:
                    btnPause.setEnabled(true);
                    btnResume.setEnabled(false);
                    btnCancelDownload.setEnabled(true);
                    btnClean.setEnabled(false);
                    break;
                case Download.PAUSED:
                    btnPause.setEnabled(false);
                    btnResume.setEnabled(true);
                    btnCancelDownload.setEnabled(true);
                    btnClean.setEnabled(false);
                    break;
                case Download.ERROR:
                    btnPause.setEnabled(false);
                    btnResume.setEnabled(true);
                    btnCancelDownload.setEnabled(false);
                    btnClean.setEnabled(true);
                    break;
                default: // COMPLETO O CANCELADO
                    btnPause.setEnabled(false);
                    btnResume.setEnabled(false);
                    btnCancelDownload.setEnabled(false);
                    btnClean.setEnabled(true);
            }
        } else {
            btnPause.setEnabled(false);
            btnResume.setEnabled(false);
            btnCancelDownload.setEnabled(false);
            btnClean.setEnabled(false);
        }
    }

    // Verifica que sea una URL valida
    private URL verifyUrl(String url) {
        //Verifica con expresiones regulares la validez de una URL
        String urlRegex = "^(http|https)://[-a-zA-Z0-9+&@#/%?=~_|,!:.;]*[-a-zA-Z0-9+@#/%=&_|]";
        Pattern pattern = Pattern.compile(urlRegex);
        Matcher m = pattern.matcher(url);
        if (!m.matches()) {
            return null;
        }
        // Verifica el formato de la URL
        URL verifiedUrl = null;
        try {
            verifiedUrl = new URL(url);
        } catch (Exception e) {
            return null;
        }
        // Verifica que el recurso de la URL sea un archivo
        if (verifiedUrl.getFile().length() < 2) {
            return null;
        }
        return verifiedUrl;
    }

    // Salir
    protected void actionExit() {
        System.exit(0);
    }

    // Adiciona una nueva descarga
    protected void actionAdd() {
        URL verifiedUrl = verifyUrl(txtUrl.getText());
        if (verifiedUrl != null) {
            tableModel.addDownload(new Download(verifiedUrl, this.folder));
            txtUrl.setText("");
        } else {
            JOptionPane.showMessageDialog(this, "URL de descarga invalida.", "Error", JOptionPane.ERROR_MESSAGE);
        }
    }

    // metodo llamado cuando la fila seleccionada de la tabla
    // cambia de estado.
    private void tableSelectionChanged() {

        if (selectedDownload != null) {
            selectedDownload.deleteObserver(DownloadManager.this);
        }

        if ((!clearing) && (tblDownloads.getSelectedRow() > -1)) {
            selectedDownload = tableModel.getDownload(tblDownloads.getSelectedRow());
            selectedDownload.addObserver(DownloadManager.this);
            updateButtons();
        }
    }

    // Pausa la descarga seleccionada
    protected void actionPause() {
        selectedDownload.pause();
        updateButtons();
    }

    // Reanuda la descarga seleccionada
    protected void actionResume() {
        selectedDownload.resume();
        updateButtons();
    }

    // Cancela la descarga seleccionada
    protected void actionCancel() {
        selectedDownload.cancel();
        updateButtons();
    }

    // Elimina de la tabla, la descarga seleccionada
    protected void actionClear() {
        clearing = true;
        tableModel.clearDownload(tblDownloads.getSelectedRow());
        clearing = false;
        selectedDownload = null;
        updateButtons();
    }

    //prepara la tabla
    private void setupTable() {
        tblDownloads.getSelectionModel().addListSelectionListener((ListSelectionEvent e) -> {
            tableSelectionChanged();
        });
        // Permite selección única de filas
        tblDownloads.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
        // Prepara un objeto ProgressBar como renderizador 
        // de la columna de progreso de la descarga.
        ProgressRenderer renderer = new ProgressRenderer(0, 100);
        renderer.setStringPainted(true); // Muestra el texto del progreso
        tblDownloads.setDefaultRenderer(JProgressBar.class, renderer);
        // Define la altura de la fila lo suficiente para ajustarse al JProgressBar.
        tblDownloads.setRowHeight((int) renderer.getPreferredSize().getHeight());
    }

    protected void setFolder(String path) {
        this.folder = path + File.separator;
    }

    /**
     * FUTURA FUNCIONALIDAD Metodo para abrir el directorio del archivo
     * descargado.
     *
     * @param file Nombre completo del archivo (Fullpath)
     * @throws java.io.IOException
     */
    protected void openFolder(String file) throws IOException {
        Desktop desktop = Desktop.getDesktop();
        File dirToOpen;
        try {
            dirToOpen = new File(file);
            desktop.open(dirToOpen);
        } catch (IllegalArgumentException iae) {
            JOptionPane.showMessageDialog(this, "Archivo no encontrado.", "Error", JOptionPane.ERROR_MESSAGE);
        }
    }

    @Override
    public void update(Observable o, Object arg) {
        // Actualiza los botones en caso que la descarga seleccionada pasa por un cambio.
        if (selectedDownload != null && selectedDownload.equals(o)) {
            updateButtons();
        }
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAddDownload;
    private javax.swing.JButton btnCancelDownload;
    private javax.swing.JButton btnClean;
    private javax.swing.JButton btnPause;
    private javax.swing.JButton btnResume;
    private javax.swing.JButton btnSearchFolder;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JLabel lblUrl;
    private javax.swing.JPanel panelActionButtons;
    private javax.swing.JPanel panelDownload;
    private javax.swing.JPanel panelDownloadsFolder;
    private javax.swing.JPanel panelSettings;
    private javax.swing.JPanel panelUrl;
    private javax.swing.JScrollPane scrollTblDownloads;
    private javax.swing.JTabbedPane tabDownloads;
    private javax.swing.JTable tblDownloads;
    private javax.swing.JTextField txtDownloadsFolderPath;
    private javax.swing.JTextField txtUrl;
    // End of variables declaration//GEN-END:variables
}
